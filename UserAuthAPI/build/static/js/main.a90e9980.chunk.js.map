{"version":3,"sources":["logo.svg","components/UserAuth.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","userAuth","props","state","email","pw","isRegister","registerText","header","loggedIn","error","handleSignInText","setState","handleChange","e","preventDefault","target","id","value","handleSubmit","validateForm","data","JSON","stringify","url","fetch","method","body","headers","then","res","json","response","console","log","success","message","onLogin","history","push","_isMounted","catch","this","errorAlert","length","Alert","variant","Container","className","Row","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","onChange","Button","onClick","style","cursor","isValid","Component","App","UserAuth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a90e9980.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from \"react\"\nimport { Form, Container, Button, Row, Alert } from \"react-bootstrap\"\n\nclass userAuth extends Component {\n    state = {\n        email: \"\",\n        pw: \"\",\n        isRegister: false,\n        registerText: \"I need to create an account\",\n        header: \"Log in\",\n        loggedIn: false,\n        error: \"\"\n    };\n\n    constructor(props) {\n        super(props);\n\n        this._isMounted = false;\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n    componentDidMount() {\n        this._isMounted= true;\n    }\n\n    render() {\n        let errorAlert;\n        if (this.state.error.length > 0)\n            errorAlert = <Alert variant=\"danger\">{this.state.error}</Alert>;\n\n        return (\n            <Container>\n                {errorAlert}\n                <h1 className=\"mb-3\">{this.state.header}</h1>\n                <Row className=\"justify-content-md-center\">\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Group controlId=\"email\">\n                            <Form.Label>Email address</Form.Label>\n                            <Form.Control\n                                type=\"email\"\n                                placeholder=\"Enter email\"\n                                onChange={this.handleChange}\n                            />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"pw\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder=\"Password\"\n                                onChange={this.handleChange}\n                            />\n                        </Form.Group>\n                        <Button variant=\"primary\" type=\"submit\">\n                            Submit\n                        </Button>\n                        <div onClick={this.handleSignInText} className=\"m-2\" style={{cursor: \"pointer\"}}>\n                            {this.state.registerText}\n                        </div>\n                    </Form>\n                </Row>\n            </Container>\n        );\n    }\n\n    handleSignInText = () => {\n        const isRegister = !this.state.isRegister;\n        const registerText = isRegister\n            ? \"I already have an account\"\n            : \"I need to create an account\";\n        const header = isRegister ? \"Sign up\" : \"Log in\";\n        this.setState({ isRegister, registerText, header });\n    };\n\n    handleChange = e => {\n        e.preventDefault();\n        this.setState({ [e.target.id]: e.target.value });\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        if (!this.validateForm()) return;\n        const data = JSON.stringify({\n            email: this.state.email,\n            pw: this.state.pw\n        });\n        const url = \"http://honker.cse356.compas.cs.stonybrook.edu/\"\n            + (this.state.isRegister ? \"/create_user\" : \"/login\");\n        //console.log(this.props);\n        fetch(url, {\n            method: \"POST\",\n            body: data,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n            .then(res => res.json())\n            .then(response => {\n                console.log(response.success + \"\\n\" + response.message);\n                if (response.success) {\n                    this.props.onLogin(this.state.email);\n                    if (this.state.isRegister) this.props.history.push(\"/user/account/type\");\n                    else if (this._isMounted && !this.state.isRegister) {\n                        this.setState({ loggedIn: true });\n                    }\n                } else if (!response.success && this._isMounted) {\n                    this.setState({error: response.message});\n                }\n            })\n            .catch(error => console.error(error));\n    };\n\n    validateForm() {\n        let isValid = true;\n        if (this.state.email.length === 0) {\n            isValid = false;\n        }\n        if (this.state.pw.length === 0) {\n            isValid = false;\n        }\n        return isValid;\n    }\n}\n\nexport default userAuth","import React from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport UserAuth from \"./components/UserAuth\"\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <UserAuth/>\n      </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}